-- Import IEEE standard libraries for logic and arithmetic operations
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;       -- Required for using std_logic and std_logic_vector
use IEEE.STD_LOGIC_ARITH.ALL;      -- (Non-standard) used for arithmetic operations
use IEEE.STD_LOGIC_UNSIGNED.ALL;   -- (Non-standard) allows treating vectors as unsigned values

-- Entity declaration: defines module name and I/O ports
entity Display is
    Port (
        SW    : in  STD_LOGIC_VECTOR(7 downto 0);  -- Input switches SW7 to SW0
        HEX0  : out STD_LOGIC_VECTOR(6 downto 0);  -- Output to 7-segment display HEX0
        HEX1  : out STD_LOGIC_VECTOR(6 downto 0)   -- Output to 7-segment display HEX1
    );
end Display;

-- Architecture block describes internal functionality
architecture Behavioral of Display is

    -- Function that converts a 4-bit binary value to a 7-segment display code
    -- Segment order assumed as: a b c d e f g (active-low logic: 0 turns segment ON)
    function BCD_to_7seg(bcd : in STD_LOGIC_VECTOR(3 downto 0)) return STD_LOGIC_VECTOR is
    begin
        case bcd is
            when "0000" => return "1000000"; -- Displays 0
            when "0001" => return "1111001"; -- Displays 1
            when "0010" => return "0100100"; -- Displays 2
            when "0011" => return "0110000"; -- Displays 3
            when "0100" => return "0011001"; -- Displays 4
            when "0101" => return "0010010"; -- Displays 5
            when "0110" => return "0000010"; -- Displays 6
            when "0111" => return "1111000"; -- Displays 7
            when "1000" => return "0000000"; -- Displays 8
            when "1001" => return "0010000"; -- Displays 9
            when others => return "1111111"; -- Blank (all segments OFF) for undefined input
        end case;
    end function;

begin

    -- Lower nibble (SW3 downto SW0) controls HEX0 display
    HEX0 <= BCD_to_7seg(SW(3 downto 0));

    -- Upper nibble (SW7 downto SW4) controls HEX1 display
    HEX1 <= BCD_to_7seg(SW(7 downto 4));

end Behavioral;
